import { NextRequest } from 'next/server';
import { retrieve } from '@/lib/retrieval';
import { getChat } from '@/lib/llm';
export const runtime='nodejs'; export const dynamic='force-dynamic';
export async function POST(req: NextRequest){ const { question } = await req.json(); const ctx = await retrieve(question,6); const quotes = ctx.slice(0,2).map((c,i)=>({ idx:i+1, title:c.title, quote:c.content.slice(0,220) })); const sys = ['You are a hospital pre-admission assistant.','Answer ONLY using the provided snippets and cite them inline like [#].','If unclear, say you\'re not certain and suggest contacting staff.'].join('\n'); const contextText = ctx.map((c,i)=>`[#${i+1}] ${c.content}`).join('\n\n'); const user = `Question: ${question}\n\nPolicies:\n${contextText}\n\nAnswer with citations like [#].`; const enc = new TextEncoder(); const chat = await getChat(); const stream = new ReadableStream({ async start(controller){ controller.enqueue(enc.encode(JSON.stringify({type:'meta', quotes})+'\n')); const gen = await chat.stream([{ role:'system', content: sys }, { role:'user', content: user }] as any); try{ for await (const chunk of gen){ const token = chunk?.content || ''; if(token) controller.enqueue(enc.encode(JSON.stringify({type:'token', token})+'\n')); } }catch(e:any){ controller.enqueue(enc.encode(JSON.stringify({type:'error', message:e?.message||String(e)})+'\n')); } controller.enqueue(enc.encode(JSON.stringify({type:'done'})+'\n')); controller.close(); } }); return new Response(stream, { headers: { 'Content-Type':'application/x-ndjson' } }); }